\newpage
\section{Literature Review}
\begin{flushleft}
The  selection, arrangement or sequencing  of an array of objects is known as combinatorics. Combinatorial optimization is the in-depth study of the selection, arrangements or sequencing of the objects such that the constraints are adhered to and the objective function is satisfied.
\end{flushleft}.
\begin{flushleft}
Dating as far back as 1897 [\ref{kpsDef}], the Knapsack problem has been studied by various mathematicians as it is a common combinatorial optimization problem. The knapsack problem states that there are $n$ possible items that can be included in a knapsack. A weight and a value are awarded to each item. The total weight of the items allocated to the knapsack must not exceed the knapsack capacity, with the objective of selecting items which will maximize the total value of the knapsack. Various other problems with characteristics of the knapsack problem arise in the real world. One particular example is the BPP,  which we will look at in greater detail in section [\ref{BPP_section}]. The knapsack problem has been viewed as a zero-one integer programming problem, in which an item is awarded the value one if it to be included in the knapsack or zero otherwise.  The knapsack problem is considered as a NP-Hard problem [\ref{kps_NP}]. The complexity of the problem can be reduced to polynomial time with one minor change to the problem. If the problem allows for fractions of materials to be packed into the knapsack, with the aim of increasing the profit generated by the items contained in the knapsack, the problem is now considered to be a continuous problem  [\ref{TSP_Ali6}].
\end{flushleft}
\subsection{Bin Packing Problem}\label{BPP_section}
\subsubsection{Fit algorithms}
\begin{flushleft}
A comparative study on various heuristic procedures to solve the BPP had been performed in [\ref{hBPP_1}]. The First-Fit (FF) algorithm, Next-Fit (NF) algorithm and Best-Fit (BF) algorithm are discussed in this study. 
\end{flushleft}
\begin{flushleft}
The FF algorithm packs a list of given items sequentially into bins, by taking the items from the list and allocating it to the first bin in which it fits, if the item does not fit in any of the opened bins, a new bin is opened and the item is allocated to this bin. The FF algorithm can be seen as a greedy algorithm which is fast performing, with order $\mathcal{O}(nlogn)$, however, it does not produce optimal results and has a lot of wastage in terms of the amount of space left in each opened bin.  
\end{flushleft}

\begin{flushleft}
Items are allocated into given bins in the NF algorithm. The algorithm  checks if the current bin has space, if it does, it allocates the next item on the list to the current bin, if it does not fit in the current bin, a new bin is opened and the item is allocated to the new bin. The NF algorithm performs faster than the FF algorithm, with $\mathcal{O}(n)$, however, it uses more bins than the FF algorithm. 
\end{flushleft}

\begin{flushleft}
In the BF algorithm, items are allocated in a given order. Items are allocated to a bin that has the smallest amount of space remaining once the item is allocated to the particular opened bin. If there are no bins which can contain the capacity of the item, a new bin is opened and the item is thus allocated to this new bin. This algorithm has a complexity of $\mathcal{O}(nlogn)$, but has the least amount of wastage. 
\end{flushleft}

\begin{flushleft}
We note that all these algorithms have the equivalent worst-case time complexities of $\mathcal{O}(nlogn)$ [\ref{GA_BPP_8}].
\end{flushleft}
\begin{flushleft}
In [\ref{LR1_cirrelet}],  an analysis of the fit algorithms are documented. When trying to optimize Bin Packing and maximizing profit using the fit algorithms, it is found that the fit algorithms cannot be applied directly to this problem, as it it multi-objective and because the item profits depend heavily on the packing of the bins. 
\end{flushleft}

\begin{flushleft}
In [\ref{Bayir_2017}],  the FF decreasing algorithm in conjunction with the simulated annealing heuristic are applied to the BPP. The results obtained illustrate that the combination of the techniques used produces good results for one dimensional BPP.
\end{flushleft}

\subsubsection{Exact solutions}
In [\ref{exactsol_8}] exact solutions to the BPP are discussed. Some algorithms that were implemented were depth-first enumerative algorithm and branch-and-bound algorithm. However, these algorithms are not feasible to be imposed on large sets of combinatorial problem instances as  [\ref{GA_BPP_8}]. We will discuss the branch-and-bound algorithm in greater detail for the TSP.
\subsubsection{Genetic Algorithms}
\begin{flushleft}
Genetic Algorithms (GA) are search algorithms that are founded in the concepts of natural selection and natural genetics, which were inspired by Darwanian principles. The GA was developed during the year 1960 by Professor John Hollard. Some key techniques applied are: natural selection, mutation and crossover. GA are evolutionary processes which are used to generate populations based on the make-up of chromosomes [\ref{hBPP_1}]. In general, chromosomes can be considered as the characteristics of a pool of candidate solutions. A preliminary population of possible solutions are generally randomly generated. Each candidate has a fitness value associated to it. The selection process entails picking the candidates with the highest fitness score. As a result of this process, the overall population fitness is increased.  Looking at the application of the GA to the BPP, we note that this algorithm generates random permutations of the input set and then implements the FF algorithm to generate valid solutions to the BPP.  In [\ref{GA_BPP_8}] a comparison of results are made of the FF algorithm and GA. In the BPP the GA iterates through the set of generations and terminates when the best overall solution is encountered. Once the initial random population is considered, then the algorithm iterates through the candidate solutions, selecting two parents and producing the offspring using the crossover concept. It then mutates the offspring and is inserted it into the trivial population. The offspring replaces the parent, only if it is fitter,  and the best solution in the population is then updated. For each chromosome in the GA, the input set is randomly arranged, creating a random permutation. The FF algorithm is applied to each of these permutations, guaranteeing a valid solution. Specific to the BPP, each candidate solution's permutation and fitness is held by a chromosome which is an element of the population array. The fitness of each of these chromosomes is the number of bins that are required to store the input set. In terms of the BPP,  chromosomes with the smallest fitness are colected with the aim of obtaining better solutions. The smallest fitness offspring chromosome is replaces the parent chromosome. The smallest fitness chromosome is  compared to the overall best chromosome kept throughout the program. If the smallest fitness chromosome in the current population is better than the overall best, then the current chromosome becomes the overall best. The algorithm's termination criterion is when a given maximal number of generations has been reached, or when a certain amount of generations has not produced any advancements, or the lower limit of the diversity in the population has been reached. Thus at the end, the overall best chromosome and it's fitness are outputted as a result. The selection process of parents entail a random selection and are appended to an array until the array of the population size is filled. Each chromosomes fitness is compared and the chromosomes with the smallest fitness are then the parents. During the crossover stage, positions of the parents and offspring's chromosomes are altered. Once the offspring is created, the process of random swaps of chromosomes are called mutations. Mutations allow for the offspring entering the population to introduce new traits. In conclusion of the comparative study of the fit algorithms and GA, the GA is found to produce solutions which are equivalent or better than the fit algorithms. The solutions obtained through the implementation of GA had a better fitness than the solutions generated using the FF algorithm. The results also illustrated that the change of the input size and bin capacity do not affect he results. As a consequence of the probabilistic tendencies of GA, the results obtained at one execution time, may vary to the next. The global optimal solution is not guaranteed by this metaheuristic, however, to increase the probability of finding the optimal solution, the algorithm should be executed multiple time. In order to increase computation efficiency, a suggestion would be to do this using parallelism. 
\end{flushleft}

\begin{flushleft}
TO DO: ADD FIGURE for clarity
\end{flushleft}